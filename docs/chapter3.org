* CDs and Records

** facilitate plist
*plist* (property list) form

#+BEGIN_SRC lisp :exports code
  '(:a 1 :b 2 :c 3)
#+END_SRC

*getf* function

#+BEGIN_SRC lisp :exports both
  (getf '(:a 1 :b 2 :c 3) :a)
#+END_SRC

#+RESULTS:
: 1

** make a plist representing a cd

#+BEGIN_SRC lisp :exports code
  (defun make-cd (title artist rating ripped)
    (list :title title :artist artist :rating rating :ripped ripped))
#+END_SRC

example:

#+BEGIN_SRC lisp :exports both
  (make-cd "Roses" "Kathy Mattea" 7 t)
#+END_SRC

#+RESULTS:
| :TITLE | Roses | :ARTIST | Kathy Mattea | :RATING | 7 | :RIPPED | T |

* Filing CDs

#+BEGIN_SRC lisp :exports both
  (defvar *db* nil)
  (defun add-record (cd) (push cd *db*))

  (add-record (make-cd "Roses" "Kathy Mattea" 7 t))
  (add-record (make-cd "Fly" "Dixie Chicks" 8 t))
  (add-record (make-cd "Home" "Dixie Chicks" 9 t))
#+END_SRC

#+RESULTS:
| :TITLE | Home  | :ARTIST | Dixie Chicks | :RATING | 9 | :RIPPED | T |
| :TITLE | Fly   | :ARTIST | Dixie Chicks | :RATING | 8 | :RIPPED | T |
| :TITLE | Roses | :ARTIST | Kathy Mattea | :RATING | 7 | :RIPPED | T |

* Looking at the Database Contents

#+BEGIN_SRC lisp :exports code
  (defun dump-db ()
    (format t "~{~{~a:~10t~a~%~}~%~}" *db*))
#+END_SRC

#+RESULTS:
: DUMP-DB

example:

#+BEGIN_SRC lisp :results output :exports both
  (dump-db)
#+END_SRC

#+RESULTS:
#+begin_example
TITLE:    Home
ARTIST:   Dixie Chicks
RATING:   9
RIPPED:   T

TITLE:    Fly
ARTIST:   Dixie Chicks
RATING:   8
RIPPED:   T

TITLE:    Roses
ARTIST:   Kathy Mattea
RATING:   7
RIPPED:   T

#+end_example

* Improving the User Interaction

#+BEGIN_SRC lisp :exports code
  (defun prompt-read (prompt)
    (format *query-io* "~a: " prompt)
    (force-output *query-io*)
    (read-line *query-io*))
#+END_SRC

#+RESULTS:
: PROMPT-READ

#+BEGIN_SRC lisp :exports code
  (defun prompt-for-cd ()
    (make-cd
     (prompt-read "Title")
     (prompt-read "Artist")
     (or (parse-integer (prompt-read "Rating") :junk-allowed t) 0)
     (y-or-n-p "Ripped")))
#+END_SRC

#+RESULTS:
: PROMPT-FOR-CD

#+BEGIN_SRC lisp :exports code
  (defun add-cds ()
    (loop
       (add-record (prompt-for-cd))
       (if (not (y-or-n-p "Another?")) 
	   (return))))
#+END_SRC

#+RESULTS:
: ADD-CDS

example:

#+BEGIN_SRC lisp :exports both
  (add-cds)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  CL-USER> (add-cds)
  Title: Rockin' the Suburbs
  Artist: BenFolds
  Rating: 6

  Ripped (y or n) y

  Another? (y or n) y
  Title: Give Us a Break
  Artist: Limpopo
  Rating: 10

  Ripped (y or n) y

  Another? (y or n) y
  Title: Lyle Lovett
  Artist: Lyle Lovett
  Rating: 9

  Ripped (y or n) y

  Another? (y or n) n
#+END_EXAMPLE

* Saving and Loading the Database
